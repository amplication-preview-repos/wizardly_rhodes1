/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryPartnersService } from "../deliveryPartners.service";
import { DeliveryPartnersCreateInput } from "./DeliveryPartnersCreateInput";
import { DeliveryPartners } from "./DeliveryPartners";
import { DeliveryPartnersFindManyArgs } from "./DeliveryPartnersFindManyArgs";
import { DeliveryPartnersWhereUniqueInput } from "./DeliveryPartnersWhereUniqueInput";
import { DeliveryPartnersUpdateInput } from "./DeliveryPartnersUpdateInput";

export class DeliveryPartnersControllerBase {
  constructor(protected readonly service: DeliveryPartnersService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryPartners })
  async createDeliveryPartners(
    @common.Body() data: DeliveryPartnersCreateInput
  ): Promise<DeliveryPartners> {
    return await this.service.createDeliveryPartners({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryPartners] })
  @ApiNestedQuery(DeliveryPartnersFindManyArgs)
  async deliveryPartnersItems(
    @common.Req() request: Request
  ): Promise<DeliveryPartners[]> {
    const args = plainToClass(DeliveryPartnersFindManyArgs, request.query);
    return this.service.deliveryPartnersItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryPartners })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryPartners(
    @common.Param() params: DeliveryPartnersWhereUniqueInput
  ): Promise<DeliveryPartners | null> {
    const result = await this.service.deliveryPartners({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryPartners })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryPartners(
    @common.Param() params: DeliveryPartnersWhereUniqueInput,
    @common.Body() data: DeliveryPartnersUpdateInput
  ): Promise<DeliveryPartners | null> {
    try {
      return await this.service.updateDeliveryPartners({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryPartners })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryPartners(
    @common.Param() params: DeliveryPartnersWhereUniqueInput
  ): Promise<DeliveryPartners | null> {
    try {
      return await this.service.deleteDeliveryPartners({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
