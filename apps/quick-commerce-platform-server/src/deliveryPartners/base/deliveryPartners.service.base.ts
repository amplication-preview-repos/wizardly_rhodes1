/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DeliveryPartners as PrismaDeliveryPartners,
} from "@prisma/client";

export class DeliveryPartnersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeliveryPartnersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deliveryPartners.count(args);
  }

  async deliveryPartnersItems(
    args: Prisma.DeliveryPartnersFindManyArgs
  ): Promise<PrismaDeliveryPartners[]> {
    return this.prisma.deliveryPartners.findMany(args);
  }
  async deliveryPartners(
    args: Prisma.DeliveryPartnersFindUniqueArgs
  ): Promise<PrismaDeliveryPartners | null> {
    return this.prisma.deliveryPartners.findUnique(args);
  }
  async createDeliveryPartners(
    args: Prisma.DeliveryPartnersCreateArgs
  ): Promise<PrismaDeliveryPartners> {
    return this.prisma.deliveryPartners.create(args);
  }
  async updateDeliveryPartners(
    args: Prisma.DeliveryPartnersUpdateArgs
  ): Promise<PrismaDeliveryPartners> {
    return this.prisma.deliveryPartners.update(args);
  }
  async deleteDeliveryPartners(
    args: Prisma.DeliveryPartnersDeleteArgs
  ): Promise<PrismaDeliveryPartners> {
    return this.prisma.deliveryPartners.delete(args);
  }
}
