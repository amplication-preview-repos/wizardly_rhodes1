/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoresService } from "../stores.service";
import { StoresCreateInput } from "./StoresCreateInput";
import { Stores } from "./Stores";
import { StoresFindManyArgs } from "./StoresFindManyArgs";
import { StoresWhereUniqueInput } from "./StoresWhereUniqueInput";
import { StoresUpdateInput } from "./StoresUpdateInput";

export class StoresControllerBase {
  constructor(protected readonly service: StoresService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Stores })
  async createStores(@common.Body() data: StoresCreateInput): Promise<Stores> {
    return await this.service.createStores({
      data: data,
      select: {
        address: true,
        contactEmail: true,
        contactPhone: true,
        createdAt: true,
        id: true,
        name: true,
        owner: true,
        ownerId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Stores] })
  @ApiNestedQuery(StoresFindManyArgs)
  async storesItems(@common.Req() request: Request): Promise<Stores[]> {
    const args = plainToClass(StoresFindManyArgs, request.query);
    return this.service.storesItems({
      ...args,
      select: {
        address: true,
        contactEmail: true,
        contactPhone: true,
        createdAt: true,
        id: true,
        name: true,
        owner: true,
        ownerId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Stores })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stores(
    @common.Param() params: StoresWhereUniqueInput
  ): Promise<Stores | null> {
    const result = await this.service.stores({
      where: params,
      select: {
        address: true,
        contactEmail: true,
        contactPhone: true,
        createdAt: true,
        id: true,
        name: true,
        owner: true,
        ownerId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Stores })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStores(
    @common.Param() params: StoresWhereUniqueInput,
    @common.Body() data: StoresUpdateInput
  ): Promise<Stores | null> {
    try {
      return await this.service.updateStores({
        where: params,
        data: data,
        select: {
          address: true,
          contactEmail: true,
          contactPhone: true,
          createdAt: true,
          id: true,
          name: true,
          owner: true,
          ownerId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Stores })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStores(
    @common.Param() params: StoresWhereUniqueInput
  ): Promise<Stores | null> {
    try {
      return await this.service.deleteStores({
        where: params,
        select: {
          address: true,
          contactEmail: true,
          contactPhone: true,
          createdAt: true,
          id: true,
          name: true,
          owner: true,
          ownerId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
